apply plugin: 'com.android.application'

def apVersion = getEnvValue("apVersion", "");

android {
    compileSdkVersion build_versions.compileSdkVersion
    buildToolsVersion build_versions.buildToolsVersion

    signingConfigs {
        release {
            storeFile file(build_versions.storeFile)
            storePassword build_versions.storePassword
            keyAlias build_versions.keyAlias
            keyPassword build_versions.keyPassword
        }
    }

    defaultConfig {
        minSdkVersion build_versions.minSdkVersion
        targetSdkVersion build_versions.targetSdkVersion

        applicationId build_product_applicationId.common
        versionCode build_product_versionCode.common
        versionName build_product_versionName.common

        manifestPlaceholders = [app_name: build_product_appName.common]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "default"
    }

    buildFeatures {
        dataBinding = true
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            // 显示app名称+当前版本号
            def fileName = "${build_versions.apkHeadName}-V${variant.versionName}"
//                // 加入打包时间
//                fileName = fileName + "-${releaseTime()}"
            // 如果是debug版本，加入beta版本号
            if ('debug'.equals(variant.buildType.name)) {
                fileName = fileName + "-beta.apk"
            } else {
                // 如果是release版本，直接显示
                fileName = fileName + "-release.apk"
            }
            outputFileName = fileName
        }
    }
}

//// 显示的时间格式，形如20171110
//def releaseTime() {
//    return new Date().format("yyyyMMdd", TimeZone.getDefault());
//}

// 获取执行gradle命令时的运行参数
String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}

repositories {
    flatDir {
        dirs 'libs', '../base/libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 主体基础模块 begin
    api project(':base')
    api project(':resource')
    // 主体基础模块 end

    // 入口模块 begin
    implementation project(':app_welcome')
    // 入口模块 end

    // bundle模块 begin
    implementation project(':bundle_login')
    implementation project(':bundle_main')
    implementation project(':bundle_user')

    implementation project(':bundle_business_videoplayer')
    implementation project(':bundle_business_audioplayer')
    implementation project(':bundle_business_pictureviewer')
    // bundle模块 end

    implementation project(':db_server')
}

apply plugin: 'maven-publish'

afterEvaluate {
    publishing {
        android.applicationVariants.all { variant ->
            if (variant.buildType.name == 'release') {
                def productType = variant.flavorName
                def publicationName = "${productType}"
                def component = components.findByName("${variant.name}_apk")
                if (component != null) {
                    publishing.publications.create(publicationName, MavenPublication) {
                        from component
                        groupId = build_product_applicationId.common
                        artifactId = build_product_appName.common
                        version = build_product_versionName.common
                    }
                }
            }
        }

        repositories {
            maven {
                url "file:///D:/PineProducts"
            }
        }
    }

    // 将发布任务添加到自定义组
    tasks.named('publish') {
        group = 'private'
    }
}